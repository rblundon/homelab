---
kind: NginxIngress
apiVersion: charts.nginx.org/v1alpha1
metadata:
  name: nginxingress-external
  namespace: nginx-ingress-external
spec:
#  routeSelector:
#    matchLabels:
#      type: external-ingress
  controller:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/instance: nginx-external
              app.kubernetes.io/name: nginx-external
          topologyKey: kubernetes.io/hostname
    config:
      entries:
        http-snippets: proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=static-cache:10m
          max_size=10g inactive=60m use_temp_path=off;
        log-format-escaping: json
        log-format: |-
          {
            "msec": "$msec",
            "connection": "$connection",
            "connection_requests": "$connection_requests",
            "pid": "$pid",
            "request_id": "$request_id",
            "request_length": "$request_length",
            "remote_addr": "$remote_addr",
            "remote_user": "$remote_user",
            "remote_port": "$remote_port",
            "time_local": "$time_local",
            "time_iso8601": "$time_iso8601",
            "request": "$request",
            "request_uri": "$request_uri",
            "args": "$args",
            "status": "$status",
            "body_bytes_sent": "$body_bytes_sent",
            "bytes_sent": "$bytes_sent",
            "http_referer": "$http_referer",
            "http_user_agent": "$http_user_agent",
            "http_x_forwarded_for": "$http_x_forwarded_for",
            "http_host": "$http_host",
            "server_name": "$server_name",
            "request_time": "$request_time",
            "upstream": "$upstream_addr",
            "upstream_connect_time": "$upstream_connect_time",
            "upstream_header_time": "$upstream_header_time",
            "upstream_response_time": "$upstream_response_time",
            "upstream_response_length": "$upstream_response_length",
            "upstream_cache_status": "$upstream_cache_status",
            "ssl_protocol": "$ssl_protocol",
            "ssl_cipher": "$ssl_cipher",
            "scheme": "$scheme",
            "request_method": "$request_method",
            "server_protocol": "$server_protocol",
            "pipe": "$pipe",
            "gzip_ratio": "$gzip_ratio",
            "http_cf_ray": "$http_cf_ray"
          }
    enableCustomResources: true
    enableTLSPassthrough: true
    enableSnippets: true
    image:
      pullPolicy: IfNotPresent
      repository: nginx/nginx-ingress
      tag: 3.7.0-ubi
    ingressClass:
      create: true
      name: nginx-external
      setAsDefaultIngress: true
    replicaCount: 2
    reportIngressStatus:
      annotations: {}
      enable: true
      enableLeaderElection: true
      ingressLink: ''
      leaderElectionLockName: external-ingress-leader
    service:
      externalTrafficPolicy: Local
      loadBalancerIP: 10.1.82.0
    prometheus:
      create: true
    serviceMonitor:
      create: true
    volumes:
    - name: nginx-cache
      persistentVolumeClaim:
        claimName: nginx-cache-external
    volumeMounts:
    - name: nginx-cache
      mountPath: /var/cache/nginx